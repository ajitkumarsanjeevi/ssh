name: Remote Deployment

on:  
  push:    
    branches: 
      - main  

env:
  Region: us-east-1
jobs:
  job1:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0 
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.Region }} 

      - name: init
        run: terraform init

      - name: plan
        run: terraform plan

      - name: apply
        run: terraform apply -auto-approve

      - name: destroy
        run: terraform destroy -auto-approve

      

      - name: ssh    
        run: |    
            mkdir -p ~/.ssh   
            echo "${{ secrets.ssh_key }}" > ~/.ssh/id_rsa 
            chmod 600 ~/.ssh/id_rsa    
                
    
      - name: script
        run: |
         
          usernames=("ubuntu" "ec2-user" "admin")   
          
          ips=($(aws ec2 describe-instances --region us-east-1 --query "Reservations[].Instances[].[PublicIpAddress]" --output text))   
          
          packages(){
          for username in "${usernames[@]}"; do
 
          for ip in "${ips[@]}"; do

          ssh -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa "$username"@"$ip" "sudo chmod 777 /opt" &> /dev/null 

          scp -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa  "$1"  "$username"@"$ip":/opt &> /dev/null 

          ssh -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa "$username"@"$ip" "sudo bash /opt/$1"                         
          
          done
          
          done
          }
         
          script=("awscli.sh")
          for script in  "${scripts[@]}"; do
          packages "$script"
          done
      
        continue-on-error: true 
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: push to ecr
        run: |
            docker build -t nginx .
            docker tag nginx:latest 585768173504.dkr.ecr.us-east-1.amazonaws.com/nginx:latest
            docker push 585768173504.dkr.ecr.us-east-1.amazonaws.com/nginx:latest

        

  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

         
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.Region }} 

      - name: ssh    
        run: |    
            mkdir -p ~/.ssh   
            echo "${{ secrets.ssh_key }}" > ~/.ssh/id_rsa 
            chmod 600 ~/.ssh/id_rsa    
                
    
      - name: script
        run: |
         
          usernames=("ubuntu" "ec2-user" "admin")   
          
          ip=("  ")   
          
          
          for username in "${usernames[@]}"; do
 
          for ip in "${ips[@]}"; do

          ssh -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa "$username"@"${my_array[@]}" "sudo chmod 777 /opt" &> /dev/null 

          scp -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa  "deployment.yml"  "$username"@"${my_array[@]}":/opt &> /dev/null 

          ssh -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa "$username"@"$ip" "sudo kubectl apply -f  /opt/deployment.yml"                         
          
          done
         
          done
          }
          
          
            
             

             
             
 

             
           
           

        
         
 
                          
                                     
                  
          
          
          


          


  
      


      

          
        
          
         
          
          

          

          
    
               
  

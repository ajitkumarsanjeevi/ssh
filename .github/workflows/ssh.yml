name: Remote Deployment        
 
on:
  push:     
    branches:  
      - main    
   
env:                         
  Region: ap-south-1 
jobs: 
  job1:  
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4   

      
      

      


      
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4  
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ env.Region }}

      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0 

      - name: init
        run: terraform init

      - name: plan
        run: terraform plan

      
       

      

      

     

          
  

      
      
        

      
      

      

      
              


      


     
            
        
          

      

      

    

      

      - name: ssh    
        run: |    

            directory="~/.ssh"

            if [ -d "$directory" ]; then
            echo "Directory exists"
            else
              

            mkdir -p ~/.ssh   
            echo "${{ secrets.splunk}}" > ~/.ssh/id_rsa 
            chmod 600 ~/.ssh/id_rsa 
            fi
    
      
            


      - name: ssh 
        run: | 


           set +e
           ansible(){
           usernames=("ubuntu" "ec2-user" "admin") 
           ips=($(aws ec2 describe-instances --region  ${{ env.Region }} --query "Reservations[].Instances[].[PublicIpAddress]" --output text))     
          
           for username in "${usernames[@]}"; do
  
           for ip in "${ips[@]}"; do

           

           

           ssh -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa "$username"@"$ip" "sudo chmod 777 /opt" &> /dev/null              
           scp -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa "$1"  "$username"@"$ip":/opt         &> /dev/null
           ssh -o StrictHostKeyChecking=no -i  ~/.ssh/id_rsa "$username"@"$ip" "sudo bash /opt/$1" &> /dev/null 

          

       

                
           done
           done 

           }
           scripts=("awscli.sh")
           for script in "${scripts[@]}"; do
           ansible "$script"
           done

        continue-on-error: true 

      - name: ansible
        run: |
           export ANSIBLE_HOST_KEY_CHEKING=False
           ansible-playbook -i hosts ebs.yml
           
           
                  
           

  
           
           
           
           
           

      

        
            
 
      
           
           
          

        
            

      
            
            
            
            

            
          


                                            
      
         

      
             

             
             
 

             
           
           

        
         
 
                          
                                     
                  
          
          
          


          


  
      


      

          
        
          
         
          
          

          

          
    
               
  
